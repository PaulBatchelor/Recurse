@2024-07-12 Day 54. Trios, triads, and bytebeats.

28 days left of batch.
---
Prev:

More sine tone attempts /
More singing drawing tablets /
All you need is NAND

---
Next:

|| @!(taskref "compeng-resources")!@ import CE links
into knowledge graph.

|| @!(taskref "dagzet-rust")!@ Try to get to this today?

|| @!(taskref "tic80-sine-tone")!@: timebox this today,
see if I can make more progress.

|| @!(taskref "demo-trio")!@: initial code, get chords
working.

@08:13 Morning triage.

@08:14 Did not get to this yesterday. Today maybe? #dagzet-rust

@08:44 I think I nerfed the experience with quantization #drawing-tablet-demo
I think I might have nerfed the experience
with the pitch quanitization to be honest. It
seems like the people I showed the quantized
version to used it for less time compared to
when it was "fretless". People really enjoyed
the fluidic expressiveness of the pitch control
and getting it to emote things using just
inflection. Food for thought for another demo?

@08:55 This would be a good weekend project #add-day-titles

@08:56 I have still not started this. Sigh. #LC75

@08:57 Don't know if this is worth my time to actually read right now #react-escape-hatches

@08:58 This concept feels pretty fleshed out #concept-concerto #demo-trio
I think I might call it "trio", and the elevator pitch
is that you control one voice in a trio, and there
is an algorithm that controls the other two pitches
to form 3 part harmony.
---
Follow-up task created: @!(taskref "demo-trio")!@.

@08:59 First step in trio: get instantaneous chords #demo-trio

@09:02 Publishing

@09:16 initial thoughts #dagzet-rust #timelog:00:18:23
My hope is that the lua implementatoin is trivial
enough that I can bring it over to rust without
too many complications. I will outline some of the
broad strokes steps required to get this program
up and running.
---
While writing these thoughts 
---
The first thing I'll need to be able to do is
read a file from disk, possibly entirely into memory.
The dagzet parser works line by by line, so if
there's some iterator abstraction that allows me be
to do this, great.
---
For parsing commands, I need to be able to read
the first three characters of each line to determine
the command code. Commands are two characters followed
by a space, with the rest of the line being being
arguments.
---
Commands need to map to functions which can parse
the argument data of that line, and potentially
append or modifiy a rust data struct representing
the graph being built up somehow. But, just setting
up a convenient way to map commands to functions
would be great. There will be quite a few, and
I often find myself wanting to add more commands to
meet my needs. I made use of Lua tables to create
a look-up table of callbacks. Hopefully I can do
a similar thing in Rust without too much fuss?
---
I need to be able to split data up by spaces.
Lua does not have a built-in =split()= like you'd
see in other languages. I'm hoping Rust standard
library has one somewhere (this functionality should be
standard not outsourced to a crate right? right?!)
---
I need a top-level data struct that can be populated
with information that is parsed. I the lua implementation,
I used tables: usually as a hashmap or array structure,
sometimes an array of array. IIRC Rust STD has
hashmaps, and vectors I think should be enough.
I can't foresee too many ownership issues due to how
imperative this is, but who knows.
---
I need to implement topological sort (Kahn's algorithm).
My lua approach used node IDs instead of references,
so I think this is going to be mostly Rust-friendly
to port. Still, I get the feeling that I may be
forgetting something that will be a pain point with
Rust.
---
When it has been determined that the graph contains
no cycles, generate the SQLite code to standard output.
This seems pretty straight forward to me, more or less
going through the generated struct (read-only)
and printing equivalent SQLite code.

@09:45 Starting initial boilerplate code. #dagzet-rust #timelog:01:07:29 

@09:46 get it to read lines of a file #dagzet-rust
Going to try to use neovim for this now.
---
tangent: trying to get auto-import working. Found: @!(dzref "neovim/nvim_cmp")!@.
---
how to get this working with lazy, README only has vim-plug?
---
Wait, it's already installed, according to the
Lazy control panel. What does InsertEnter mean?
---
Okay, I get the recommendations, but I don't know how
to insert it.
---
Got it! Typing "File" then hitting ctrl-y does it.
---
@10:19 haha. flopping around with rust compiler on trivial things. nailing it. #dagzet-rust

@10:24 give it a file on the command line #dagzet-rust

@10:39 Parse lines, find their command code. #dagzet-rust

@10:51 That's some good enough boilerplate. #dagzet-rust
I have it parsing command codes in the test file, and there
is some placeholder stuff where I can eventually do stuff
with those commands.

@12:15 Back at hub. Setting myself up.
I got a nice big screen here. Looks nice.

@12:21 Initial boilerplate code, maybe some chords #demo-trio #timelog:01:33:13

@12:22 make copy of the singer test. #demo-trio

@12:36 getting the pitch control happening in rust instead of C #demo-trio

@12:51 time for initial chord logic? #demo-trio
For now: given a pitch (octave-wrapped, 0-11), find
the corresponding triad. Use a lookup table (vector,
probably).

@12:54 consolidate voice into struct #demo-trio

@13:05 two intial instances #demo-trio

@13:16 initial chord look-up table #demo-trio

@13:51 initial chord logic works! #demo-trio
I'm going to need to rework this to make it
work with gesture and chords, but this
is a good start.

@13:56 changing the smooth times makes a HUGE difference wow #demo-trio

@16:43 Fell into pairing all day.
Side note: the LED sign is 96x38

@18:21 Wrapping up
