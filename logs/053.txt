@2024-07-11 Day 53. All you need is NAND.
29 days left of batch.
---
Prev:

I truly do not /
understand how the sound works /
inside TIC-80
---

Next:

|| @!(taskref "poke-sound-warning")!@: shoot I forgot
to do this one yesterday.

|| @!(taskref "tic80-sine-tone")!@: Not completely
out of ideas yet

|| @!(taskref "drawing-tablet-demo")!@: time to transition
from experiment to demo

|| @!(taskref "dagzet-rust")!@: peak at this, if there
is time?

@08:28 This is not worth any more of my time.
Considering how few of these I'm realistically going
to get to, it's going to be easier to just manually
print them to PDF to get them on my RM. Solid attempt
though, had a good adventure.

@08:32 Ooops forgot. First thing today #poke-sound-warning

@08:33 I have a few more ideas on how to do this #tic80-sine-tone
Look at =tic_core_sound_tick_start=
and  =tic_core_sound_tick_end=.

@08:35 Officially concluded. #drawing-tablet-experiments
Now onto demo

@08:37 Drawing tablet demo: mono singing voice #drawing-tablet-demo
Going to try and timebox this to just today. What
I want is to get pitch snapping on x-axis,
reverb and delay effects, as well as y-axis intensity
control.

@08:39 Some initial boilerplate rust code would be nice to set up today if there's time #dagzet-rust

@08:40 Publishing

@08:51 Gotta add a sound warning to poke. #poke-sound-warning #timelog:00:04:57

@09:01 Another stab at this tic80 sound stuff #tic80-sine-tone

@09:06 looking at ringbuf in tick end function #poke-sound-warning
It seems like there's a ring buffer of registers,
and a register holds the data for one frame of audio.
A frame consists of 4 channels of sound. Each channel
is represented as a 32-bit signed integer.
---
When the end tick function is called, it gets
the current register in the ring buffer,
copies the register information in memory (RAM)
to that ring buffer, then copies the "pcm" and "stereo"
data bits as well. The ring buffer head is then
incremented, but it's inside some conditional.
I can't fully grok the conditional, but it seems
to be some kind of bounds checking? I'm going
to ignore it mostly for now.

@09:18 Flipping back to =studio_sound= again. Does it get called? #tic80-sine-tone
Yup, it's getting called.

@09:22 Back to sokol. Are we in sokol? #tic80-sine-tone
No. No we are not in Sokol.

@09:26 We are in SDL! #tic80-sine-tone
I've zoomed up to the top-most callback level
which looks familiar enough to me.
Still, it's doing stuff in a less than straight-forward
way than usual.
---
This is the code worth digging into a bit, which
is responsible for copying TIC-80 PCM data into
SDL's audio buffer. I have reformatted it a bit
to make it more readable. Initially, it was all
on one line.
===
#+BEGIN_SRC c
*stream++ =
((u8*)tic->product.samples.buffer[
    tic->product.samples.count *
    TIC80_SAMPLESIZE -
    platform.audio.bufferRemaining--
];
#+END_SRC
===
---
The =stream= variable here is a chunk of u8 vars.
---
The =TIC80_SAMPLESIZE= ends up being 2. This could
either mean it's a stereo frame of 8-bit values,
or the sample type is 16-bit and the samples
are interleaved if it's stereo. Unclear.
---
The =bufferRemaining= variable is decreasing
by 1 every sample, and being subtracted from
the total number of bytes that the buffer has.
This feels like a bit of round-a-about way to avoid
using a for loop structure.
---
When the audio buffer counter goes to zero, it
fills up the tic80 buffer again using =studio_sound=.
It continues doing this until the SDL buffer is
filled.
@09:50 =tic_core_synth_sound= updates tail #tic80-sine-tone
Meanwhile, =tic_core_synth_head= updates the head.
The relevant bits of code look almost identical.

@09:53 Just printed tick start/ends and sound synth #tic80-sine-tone
There's some kind of async stuff happening I think.
A tick start always follows up with a tick end, so
that's being called on one thread. Meanwhile,
the synth sound function can be called a few
times in between these ticks. Sometimes once or
twice, or not at all.

@09:56 Where are the tick start/end functions being called? #tic80-sine-tone
There's mention of a =tic80_tick= function, but when
I try to printf from it, nothing shows up.
---
Okay found it! inside =gpuTick()= from SDL, the
call chain is =studio_tick=, =renderStudio=, then
calls to =tic_core_tick_start=
and =tic_core_tick_end=, which makes calls
to the sound tick starts and ends.

@10:10 That's enough for now #tic80-sine-tone #timelog:01:13:35
It's looking to be an interesting sound problem, because
the timing of sound rendering is related to the drawing
callback. There's things like jitter and frame-drops.
How does it handle that sort of thing? Does the
so-called "blip buffer" smooth things out somehow?

@11:00 Chat with Sonali

@12:47 Time to start drawing tablet demo #drawing-tablet-demo #timelog:01:28:59

@13:53 Some light refactoring #drawing-tablet-demo

@14:20 Lots of very welcome distractions #drawing-tablet-demo
But we are back. Attempting to clean up main a little
bit. Starting with the arg parsing.

@14:42 Add an interrupt signal. #drawing-tablet-demo
It keeps screwing up my terminal window when I
ctrl-C.

@14:46 Move out tablet control to separate file. #drawing-tablet-demo

@15:10 Make the pitch snap #drawing-tablet-demo

@16:00 Presentations / Mini Dinner

@17:41 Reading: boolean algebra #read-elem-compsys #timelog:01:30:42
