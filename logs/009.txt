@2024-05-28 Day 9. Rust code organization.
Prev: Added my task management system to my static site
generator @!(ref "taskgroups")!@. Ported phasor algorithm to
Rust [[https://github.com/PaulBatchelor/BoingBoingBoing/blob/main/src/phasor.rs]],
paired with Dan learning how to use
cpal @!(dzref "rust/cpal")!@.
---
Next: Audio Hang, Software Foundations (Lurk), Graphics,
migrate DSP code to voxbox, begin work on glottis
algorithm port.

@08:38 Thoughts during breakfast.
I started with the general question "what is it that I'm
trying to do here?" and worked from there. It ended up
being a good way to articulate why I chose to do my
singing synthesizer project.
---
I'm trying to find a job. I'm using my time here to
diversify my skills to something less niche so I have
a better time finding relevant jobs. My career up to this
point has involved a lot of "legacy" systems that nobody
is hiring for (unless it's a super senior position).
---
The project I have chosen here involves experiments in
singing synthesis that run in browser. This to me has a
good balance of familiarity (comfortable) and unfamiliarity
(uncomfortable). Audio programming, singing synthesis,
and DSP algorithms are comfortable things for me. The
regions of the uncomfortale and unfamiliar lie in *how*
I am doing these things. Namely, Rust (to webassembly),
and just about anything related to web development.
---
I think my starting point is learning Rust. Even though
it is quite complicated, it is the shortest distance
away from my zone of familiarity, since this is where
I'll be doing the audio DSP work. My first few weeks here
will be spent building the core DSP kernel.
@09:13 Morning triage.

@09:55 This is in a good enough place. Follow-up tasks have been created. #htmlize-tasks

@09:56 Resume building can happen next week I think #resume-setup

@09:57 Hoping to start the glottis port today. #implement-glot
This is the algorithm I'd like to use:
[[https://git.sr.ht/~pbatch/mnodes/tree/master/item/glot/glot.c]].

@09:58 It's trivial to add an mtof function. Doing this today. #implement-mtof

@09:59 Would be nice to try and get a vs code setup today or tomorrow #vscode-rust-setup

@10:00 Pack up and leave for RC

@10:59 Arrival / Puttering on Couch

@11:17 Piano / Wander

@12:00 Audio Hang

@13:00 Lunch

@14:06 Software Foundations

@15:11 add re-useable mtof utility to boing^3 #implement-mtof

@15:16 glot pre-setup: import wavwrite #implement-glot
This is hard for me because I don't actually know what the
best practice is for organizing library code.
---
Found this: [[https://rust-classes.com/chapter_4_3]]

@15:30 Graphics Hang
@16:30 Home
@20:00 Rust code organization
Basically, wanted to see how Rust projects tend to split
up components in a project (rather than one lib.rs file).
---
Glanced at some docs for this @!(dzref "rust/organizing_code_project_structure")!@,
and @!(dzref "rust/bringing_paths_into_scope_use")!@.
---
There doesn't seem to be any good way to have shared code in
examples that isn't included in the library. Something
like monowav @!(dzref "voxbox/monowav")!@ isn't something
that really should be a publically available functionality,
but it's really useful for rapid prototyping. It's also
too small to make it a whole other project. For now, I'm
just leaving it in there.
