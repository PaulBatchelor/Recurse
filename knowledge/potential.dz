ns codestudy/potential
gr Study notes for some code files from the Potential plugin
gr VCVRack suite.

nn github
hl https://github.com/dbonel/potential
ln Gihub Link for source code

nn test_reference
ln Just a test reference
fr codestudy/potential/plugin.cpp 12 14

nn cpp
ln The C++ code

nn init_entry_point
ln Init Entry Point Function
fr codestudy/potential/plugin.cpp 5 15
co $ cpp
rm This must be the top-level entry point

nn add_model_magsign
ln The magsign model is added with some function pointer called
ln "addModel"
fr $ 8
td what is a model?
co $ init_entry_point

nn header_file_looks_like_boilerplate
ln The main plugin.hpp header file looks like mostly boilerplate.
fr codestudy/potential/plugin.hpp 0
co $ cpp

nn magsign_cpp
ln magsign c++ file
fr codestudy/potential/mag_sign.cpp 0
co $ cpp

nn magsign_struct
ln magsign struct (C++ struct that seems to inherit from Module)
co $ magsign_cpp
fr $ 3 29

nn magsign_enums
ln MagSign enums
co $ magsign_struct
fr $ 4 12

nn magsign_constructor
ln MagSign constructor
co $ magsign_struct
fr $ 14 22

nn magsign_processor
ln MagSign process function
co $ magsign_struct
fr $ 24 29

nn magsign_widget
ln Magsign Widget Struct (Inherits from ModuleWidget)
co $ magsign_cpp
co $ magsign_struct
cr the other struct
fr $ 31 59

nn magsign_model_creation
co $ magsign_cpp
fr $ 61
ln Creating a global instance of MagSign called "modelMagSign"
ln using some function called "createModel".
rm "Model" as in "MVC Architecture?"
co $ add_model_magsign
cr this variable is what is added to in the init function

nn magsign_child_components
co $ magsign_widget
ln calls to =addChild=, which I'm assuming are just like
ln components.
rm borrowed terminology from DOM?
fr $ 36 43

nn magsign_add_inputs
co $ magsign_widget
ln adding 3 inputs to the module using =addInput()=.
fr $ 45 50

nn magsign_add_outputs
co $ magsign_widget
co $ magsign_add_inputs
cr related
fr $ 52 57
ln Adding 3 outputs to the module using =addOutput()=.

nn magsign_process_inner_loop
co $ magsign_processor
fr codestudy/potential/mag_sign.cpp 25 27
ln inner loop of the MagSign Processor

nn get_inputs_outputs
co $ magsign_process_inner_loop
fr $ 25 26
ln These lines get input and output "ports" using
ln a function called =ffi_port()=. The return type
ln is =rustlib::Port=, so this is where the actual
ln transition from CPP to Rust starts.

nn only_first_inputs_outputs
ln Only the first inputs and outputs it seems. In C++,
ln it's at array index 0. I'm guessing that this plugin
ln has only one channel in and one channel out? and this
ln is stored in the first input.
tg clarify what inputs[0] and outputs[0] point to

nn call_mag_sign_process_raw
co $ magsign_process_inner_loop
fr $ 27
ln A call to =rustlib::magsign_process_raw=. This is
ln probably where the DSP happens in rust.

nn rust
ln The Rust Code

nn mag_sign_process_raw
ln mag_sign_process_raw(). Get the raw pointers 
ln from inputs, outputs. then call mag_sign_process
ln DSP call
fr codestudy/potential/mag_sign.rs 58 62
co $ rust
co $ call_mag_sign_process_raw
cr called inside of DSP callback
co $ magsign_process_inner_loop
cr very similar structure

nn mag_sign_process
ln mag_sign_process(). Does the actual DSP.
co $ mag_sign_process_raw
cr called inside of process_raw
ln mag_sign_process()
fr $ 4 56
co $ rust

nn MagSignInput_struct
ln MagSignInput struct
co $ rust
fr $ 64 68

nn RackInput_MagSignInput
ln Implement RackInput trait for MagSignInput
co $ MagSignInput_struct
fr $ 69 92

nn MagSignOutput_struct
ln MagSignOutput struct
co $ rust
fr $ 94 98
co $ MagSignInput_struct
cr related struct

nn RackOutput_MagSignOutput
ln Implement RackOutput trait for MagSignOutput
co $ MagSignOutput_struct
co $ RackInput_MagSignInput
cr similar
fr $ 99 122

nn upper_half_processing
ln Upper half processing: decomposition
co $ mag_sign_process
fr $ 6 25

nn lower_half_processing
ln Lower half processing: decomposition
co $ mag_sign_process
co $ upper_half_processing
cr done after upper half
fr $ 28 55
td study lower half processing

nn method_chaining_bipolar
ln Some method chaining on "bipolar" variable.
co $ upper_half_processing
fr $ 12 24

nn bipolar_iter
ln iter(): just makes the elements here iterable. These
ln must be the input samples.
co $ method_chaining_bipolar
fr $ 13

nn bipolar_zip
ln nested zips: =.zip(magnitude.iter_mut().zip(sign.iter_mut()))=
co $ bipolar_iter
fr $ 14
td write out what this is doing

nn bipolar_for_each
ln for_each()
co $ bipolar_zip
fr $ 15 24
td study this inner loop
