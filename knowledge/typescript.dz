ns webdev/typescript

nn declaration_files
hl https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html
ln Declaration Files in Typescript

nn discriminated_union
ln Discriminated Union: When every type in a union contains
ln a common property, and can narrow out the fields in the union.
ff What is a discriminated union?
fb A discriminated union happens when every type in a union contains
fb a common property.
hl https://www.typescriptlang.org/docs/handbook/2/narrowing.html#discriminated-unions

nn discriminant_property
ln Discriminant Property: a common property found amongst
ln types in a discriminated union.
co $ discriminated_union

nn function_overloading
ln Function Overloading

nn overload_signature
ln overload signature: in function overloading, these are
ln function signatures that specify the various overloads
ff What is an overload signature?
fb Overload signatures are used in the context of function
fb overloading in typescript. They refer to the function
fb signatures that define the various input parameter
fb combinations.
co $ function_overloading

nn implementation_signature
ln Implementation Signature: the function signature below
ln the overload signatures
ff What is an implementation signature?
fb In function overloading, the implementation signature
fb is the function signature below the overload signatures.
co $ function_overloading
co $ overload_signature
cr overload signatures must be compatible with the
cr implementation signature

nn excess_property_checking
ln Excess Property Checking: an special check that typescript
ln performs on object literals. If there are properties that
ln the "target type" object literal doesn't have, an error
ln will be produced. This sort of error would typically
ln fail silently in JavaScript.
ff What is excess property checking in typescript?
fb excess property checking is a check performed on object
fb literals, and will check for properties not in the
fb target object literal.
hl https://www.typescriptlang.org/docs/handbook/2/objects.html#excess-property-checks

nn identity_function
ln Identity Function: "hello world" of generics, a function that
ln will return back whatever it is passed in.
hl https://www.typescriptlang.org/docs/handbook/2/generics.html#hello-world-of-generics
ff What is the identity function?
fb A function that will return back whatever it is passed in.

nn generic_constraint
ln Generic Constraint =function stuff<Type extends foo>(arg: Type)=
ff what does generic constraint syntax look like?
fb =function stuff<Type extends foo>(arg: Type)=.

nn generic_parameter_default
ln Generic Parameter Default: by providing default values,
ln generic parameters can be optional.
ff What is an example of using default generic parameters?
fb function foo<T = number, U = number>(a: T, b: T) { return [a, b]; }

nn covariance_contravariance_wiki
hl https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)
ln Covariance and Contravariance: wikipedia
rm found while reading typescript handbook

nn covariance_contravariance
ln Covariance and contravariance: type theory terms describing
ln the relationship between two generic types.
co covariance_contravariance_wiki $
cr more information
ff what is an example of covariance and contravariance?
fb Producer<Cat> where Producer<Animal> expected: Cat is an Animal,
fb covariance. Consumer<Animal> where Consumer<Cat> expected:
fb any function that is capable of accepting a Cat must also
fb be capable of accepting an animal, contravariance.
hl https://www.typescriptlang.org/docs/handbook/2/generics.html#variance-annotations

nn keyof
ln keyof: operator that takes in an object type and produces
ln a string or numeric union of its keys.
rm ex: Point = {x: number; y: number}; type P = keyof Point;
rm P is equivalent to Type P = "x" | "y";
ff What is the "keyof" operator?
fb The keyof operator in typescript takes in an object,
fb and produces a union of its keys.
