ns webdev/typescript

nn declaration_files
hl https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html
ln Declaration Files in Typescript

nn discriminated_union
ln Discriminated Union: When every type in a union contains
ln a common property, and can narrow out the fields in the union.
ff What is a discriminated union?
fb A discriminated union happens when every type in a union contains
fb a common property.
hl https://www.typescriptlang.org/docs/handbook/2/narrowing.html#discriminated-unions

nn discriminant_property
ln Discriminant Property: a common property found amongst
ln types in a discriminated union.
co $ discriminated_union

nn function_overloading
ln Function Overloading

nn overload_signature
ln overload signature: in function overloading, these are
ln function signatures that specify the various overloads
ff What is an overload signature?
fb Overload signatures are used in the context of function
fb overloading in typescript. They refer to the function
fb signatures that define the various input parameter
fb combinations.
co $ function_overloading

nn implementation_signature
ln Implementation Signature: the function signature below
ln the overload signatures
ff What is an implementation signature?
fb In function overloading, the implementation signature
fb is the function signature below the overload signatures.
co $ function_overloading
co $ overload_signature
cr overload signatures must be compatible with the
cr implementation signature

nn excess_property_checking
ln Excess Property Checking: an special check that typescript
ln performs on object literals. If there are properties that
ln the "target type" object literal doesn't have, an error
ln will be produced. This sort of error would typically
ln fail silently in JavaScript.
ff What is excess property checking in typescript?
fb excess property checking is a check performed on object
fb literals, and will check for properties not in the
fb target object literal.
hl https://www.typescriptlang.org/docs/handbook/2/objects.html#excess-property-checks

nn identity_function
ln Identity Function: "hello world" of generics, a function that
ln will return back whatever it is passed in.
hl https://www.typescriptlang.org/docs/handbook/2/generics.html#hello-world-of-generics
ff What is the identity function?
fb A function that will return back whatever it is passed in.

nn generic_constraint
ln Generic Constraint =function stuff<Type extends foo>(arg: Type)=
ff what does generic constraint syntax look like?
fb =function stuff<Type extends foo>(arg: Type)=.

nn generic_parameter_default
ln Generic Parameter Default: by providing default values,
ln generic parameters can be optional.
ff What is an example of using default generic parameters?
fb function foo<T = number, U = number>(a: T, b: T) { return [a, b]; }

nn covariance_contravariance_wiki
hl https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)
ln Covariance and Contravariance: wikipedia
rm found while reading typescript handbook

nn covariance_contravariance
ln Covariance and contravariance: type theory terms describing
ln the relationship between two generic types.
co covariance_contravariance_wiki $
cr more information
ff what is an example of covariance and contravariance?
fb Producer<Cat> where Producer<Animal> expected: Cat is an Animal,
fb covariance. Consumer<Animal> where Consumer<Cat> expected:
fb any function that is capable of accepting a Cat must also
fb be capable of accepting an animal, contravariance.
hl https://www.typescriptlang.org/docs/handbook/2/generics.html#variance-annotations

nn keyof
ln keyof: operator that takes in an object type and produces
ln a string or numeric union of its keys.
rm ex: Point = {x: number; y: number}; type P = keyof Point;
rm P is equivalent to Type P = "x" | "y";
ff What is the "keyof" operator?
fb The keyof operator in typescript takes in an object,
fb and produces a union of its keys.

nn branded_types
hl https://www.learningtypescript.com/articles/branded-types
ln Branded Types
td make branded types flashcard

nn typefest
hl https://github.com/sindresorhus/type-fest/
ln typefest: A collection of essential TypeScript types

nn typeof
hl https://www.typescriptlang.org/docs/handbook/2/typeof-types.html
ln typeof operator: previously defined in javascript, typeof
ln extends this operator so it can be used in a type context
ln to refer to the type of a variable or property
ff what is the "typeof" operator (in TypeScript)?
fb The typeof operator can be used to refer to the type of
fb variable or property. (ex: let s = "hello"; let n: typeof s;)

nn indexed_access_type
hl https://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html
ln indexed access type: used to look up the specific property
ln of a type. ex: Age = Person["age"].
ff What is indexed access type?
fb In typescript, is notation used to look up a specific property of a type.
fb ex: Age = Person["age"].

nn conditional_types
hl https://www.typescriptlang.org/docs/handbook/2/conditional-types.html
ln Conditional Types: help describe the relation between the
ln types of inputs and outputs.
ff What is a conditional type?
fb Conditional types help describe the relation between types
fb of inputs and outputs. Syntax: Dog extends Animal ? number : string;

nn infer
hl https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#inferring-within-conditional-types
ln Infer keyword: can be used with conditional types to infer from
ln types compared against in the true branch. ex:
ln type Flatten<T> = T extends Array<infer Item> ? Item : T;
ff What is the infer keyword?
fb The infer keyword can be used to infer types in conditional
fb type expressions. Ex: type Flatten<T> = T extends Array<infer Item> ? Item : T;
co $ conditional_types
cr used with

nn distributive_conditional_types
ln Distributive Conditional Types: Occurs a union is passed
ln into a conditional type. It maps over each member type
ln in the union.
hl https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#distributive-conditional-types

nn mapped_types
ln mapped types: generic type which uses a union of PropertyKeys
ln (frequently via a keyof) to iterate through keys to create a type
hl https://www.typescriptlang.org/docs/handbook/2/mapped-types.html
co $ keyof
cr typically uses a union of PropertyKey's made via keyof
ff What is a mapped type?
fb A generic type which uses a union of PropertyKeys (via keyof usually)
fb to iterate through keys to create a type.
fb ex type OptionsFlag<Type> = { [Property in keyof Type]: boolean; };
hl https://www.typescriptlang.org/docs/handbook/2/mapped-types.html#mapping-modifiers

nn as
ln as keyword: used to remap keys in mapped types.
ln ex: type MappedTypeWithNewProperties<Type> = {
ln [Property in keyof Type as NewKeyType]: Type[Property];
ln }
hl https://www.typescriptlang.org/docs/handbook/2/mapped-types.html#key-remapping-via-as
ff what is the 'as' keyword?
fb The 'as' keyword is used to remap keys in mapped types.
co $ mapped_types

nn template_literal_types
ln template literal types: types built on string literal
ln types, using the same syntax as 
ln template literal strings in javascript.
ff what are template literal types?
fb Types built on string literal types, using the same
fb syntax as javascript template literal strings
hl https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html

nn instance_type
hl https://www.typescriptlang.org/docs/handbook/utility-types.html#instancetypetype
ln InstanceType<Type>: constructs a type of a constructor
ln function in =Type=.
