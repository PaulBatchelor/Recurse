ns rust
gr a general place for rust related things. Put rust things
gr here if they don't have a good home yet.

nn unsound_zoo
hl https://github.com/unsound-zoo/unsound-zoo.github.io
ln The Unsound Zoo: examples of shooting yourself in the foot with Rust
tg rust

nn turn_off_dead_code_warning
ln #[allow(dead_code)]
tg rust

nn cargo_watch
ln Cargo Watch: Watches over your Cargo projectâ€™s source
hl https://crates.io/crates/cargo-watch
tg rust crates
rm Useful way to auto-recompile rust project on any changes

nn cargo_watch_command
ln cargo watch -x build
co $ cargo_watch
cr example command

nn cpal
hl https://github.com/RustAudio/cpal
ln Cross-platform Audio I/O library in pure Rust
tg audio rust

nn organizing_code_project_structure
hl https://rust-classes.com/chapter_4_3
ln organizing code and project structure
tg rust
rm trying to set up VoxBox the "right way"

nn bringing_paths_into_scope_use
hl https://doc.rust-lang.org/book/ch07-04-bringing-paths-into-scope-with-the-use-keyword.html
ln Bringing Paths into Scope with the use Keyword
tg rust

nn mutex_rust
hl https://doc.rust-lang.org/std/sync/struct.Mutex.html
ln mutexes in rust (rust reference)
tg threading rust

nn tinyaudio
hl https://docs.rs/tinyaudio/latest/tinyaudio/
ln rust bindings to tinyaudio
rm easier to work with than cpal
co $ cpal
cr easier to work with than cpal

nn checked_mul
hl https://doc.rust-lang.org/std/primitive.u32.html#method.checked_mul
ln checked_mul()
tg rust

nn wrapping_mul
hl https://doc.rust-lang.org/std/primitive.u32.html#method.wrapping_mul
ln wrapping_mul()
tg rust
co $ checked_mul
cr performs wraparound, needed to prevent panic in my LCG

nn debug_macro
ln debug macro (dbg!)
hl https://doc.rust-lang.org/std/macro.dbg.html
tg rust macro debug

nn potential_vcv
hl https://github.com/dbonel/potential
ln Potential VCV Rack modules: examples of VCV Rack modules
ln written in Rust
rm Introduced to me by Paolo, who was interested in getting
rm Voxbox into a VCV Rack format.
tg rust audio

nn std_iter
ln std::iter
hl https://doc.rust-lang.org/std/iter/
tg rust rust_std

nn std_iter_zip
ln std::iter::zip
hl https://doc.rust-lang.org/std/iter/fn.zip.html
tg rust rust_std

nn std_bufread_lines
ln using lines() to read a file line by line
hl https://doc.rust-lang.org/std/io/trait.BufRead.html#method.lines
rm useful when building dagzet in rust

nn bitwhip
hl https://github.com/bitwhip/bitwhip
ln bitwhip: low latency screen sharing

nn large_codebases
hl https://kerkour.com/rust-how-to-organize-large-workspaces
ln How to organize large Rust codebases

nn doc_comments
ln doc comments in rust (rust by example)
hl https://doc.rust-lang.org/rust-by-example/meta/doc.html

nn clippy_book
ln The Clippy Book
hl https://doc.rust-lang.org/clippy/index.html

nn phantom_types
ln Phantom Types
hl https://doc.rust-lang.org/rust-by-example/generics/phantom.html

nn as_ref
hl https://doc.rust-lang.org/std/convert/trait.AsRef.html#tymethod.as_ref
ln as_ref(): Converts this type into a shared reference of
ln the (usually inferred) input type.

nn string
ln Rust String
hl https://doc.rust-lang.org/std/string/struct.String.html

nn string/get
hl https://doc.rust-lang.org/std/string/struct.String.html#method.get
ln String.get()  can be used to get a slice of a string,
ln something like =str.get(1..)= is like =s[1:]= in python.
co $ ..

nn iter
ln iter
hl https://doc.rust-lang.org/std/iter/

nn std/convert/TryFrom
hl https://doc.rust-lang.org/std/convert/trait.TryFrom.html
ln TryFrom: Simple and safe type conversions that may 
ln fail in a controlled way under some circumstances. It 
ln is the reciprocal of TryInto.
co $ ..
co $ ../TryInto
cr Reciprocal

nn std/convert
ln convert: traits for conversions between types
hl https://doc.rust-lang.org/std/convert/index.html
co $ ..

nn std/convert/TryInto
hl https://doc.rust-lang.org/std/convert/trait.TryInto.html
ln TryInto: An attempted conversion that consumes self,
ln which may or may not be expensive.
co $ ..

nn std
hl https://doc.rust-lang.org/std/
ln rust standard library

nn borrow_checker
ln the rust borrow checker

nn std/collections
ln collections
hl https://doc.rust-lang.org/std/collections/index.html
co $ ..

nn std/collections/hashmap
ln hashmap
co $ ..
hl https://doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html

nn comprehensive_rust
hl https://google.github.io/comprehensive-rust/index.html
ln comprehensive_rust

ns +comprehensive_rust
ns +09_references
nn exclusive_reference
hl https://google.github.io/comprehensive-rust/references/exclusive.html
ln Exclusive reference
rm AKA mutable reference?
ns ..
ns ..

nn std/iter
ln iter
hl https://doc.rust-lang.org/std/iter/index.html
co $ ..
co iter $
cr older node

nn await
hl https://doc.rust-lang.org/std/keyword.await.html
ln await: suspend execution until the result of a Future
ln is ready

nn async_book
hl https://rust-lang.github.io/async-book/
ln The Rust Async Book
co await $
cr for more information

nn std/future
hl https://doc.rust-lang.org/std/future/trait.Future.html
ln Future: A future represents an asynchronous computatoin
ln obtained by use of async.
co $ ..
co await std/future

nn GATS_stabilization
hl https://blog.rust-lang.org/2022/10/28/gats-stabilization.html
ln Rust stabalization of Generic Associated Types in
ln Rust 1.65

nn std/iter/trait
hl https://doc.rust-lang.org/std/iter/trait.Iterator.html
ln iter trait
co $ ..

nn std/iter/trait/copied
hl https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.copied
ln copied: creates an iterator which copies all of
ln its elements. This is useful when you have an
ln itnerator over =T=, but need an iterator over
ln =&T=.

nn std/ops
hl https://doc.rust-lang.org/std/ops/index.html
ln Overloadable operators
co $ ..

nn std/ops/traits/FnMut
hl https://doc.rust-lang.org/std/ops/trait.FnMut.html
ln FnMut: version of the call operator that takes
ln a mutable receiver

nn polonius
ln Polonius: a core library that models the borrow check

nn polonius/git
hl https://github.com/rust-lang/polonius

nn polonius/book
hl https://rust-lang.github.io/polonius/
ln The Polonius Book

nn embedded_rust
ln The embedded rust book

nn embedded_rust/toc
co $ ..
nn embedded_rust/toc/01_introduction
co $ ..
nn embedded_rust/toc/01_introduction/01_02_no_std
ln 1.2: A no-std rust environment
hl https://docs.rust-embedded.org/book/intro/no-std.html
co $ ..

nn std/slice
hl https://doc.rust-lang.org/std/slice/index.html
ln module for the slice primitive
co $ ..

nn std/slice/primitive
hl https://doc.rust-lang.org/std/primitive.slice.html
co $ ..

nn std/env
hl https://doc.rust-lang.org/std/env/index.html
ln env: inspection and manipulation of rust environment
co $ ..

nn std/env/args
hl https://doc.rust-lang.org/std/env/fn.args.html
ln args(): returns the argument that this command was
ln started with (normally passed via the command line)
co $ ..

nn std/env/structs

nn std/env/structs/args
hl https://doc.rust-lang.org/std/env/struct.Args.html
ln args struct
co $ ..

nn std/iter/skip
hl https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.skip
ln skip() the first n elements
co $ ..

nn std/ops/not
hl https://doc.rust-lang.org/std/ops/trait.Not.html
ln Not trait
co $ ..

nn leptos
hl https://leptos.dev/
ln leptos: A cutting edge Rust framework for the
ln modern web.
rm mentioned by SH

nn RTIC
hl https://rtic.rs/2/book/en/
ln RTIC: The hardware accelerated Rust
ln RTOS

nn std/str
hl https://doc.rust-lang.org/std/primitive.str.html
ln str
co $ ..

nn std/str/split_whitespace
hl https://doc.rust-lang.org/std/primitive.str.html#method.split_whitespace
ln split_whitespace(): split at whitespace
co $ ..
co ../../iter/collect $
cr used with collect() to create vector of split items

nn implementing_iter
hl https://doc.rust-lang.org/std/iter/index.html#implementing-iterator
ln implementing iter
co $ std/iter

nn std/iter/collect
ln collect(): Transforms an iterator into a collecto
hl https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.collect
co $ ..

nn std/vec
hl https://doc.rust-lang.org/std/vec/struct.Vec.html
co $ ..

nn std/vec/len
hl https://doc.rust-lang.org/std/vec/struct.Vec.html#method.len
ln len() return size of vector
co $ ..

nn std/vec/is_empty
co $ ../len
cr when checking if length is zero, more idiomatic to call
cr =is_empty()=
hl https://doc.rust-lang.org/std/vec/struct.Vec.html#method.is_empty
ln is_empty(): returns true if the vector contains no elements

nn std/result
hl https://doc.rust-lang.org/std/result/index.html
ln error handling with the Result type
co $ ..

nn std/result/is_err
hl https://doc.rust-lang.org/std/result/enum.Result.html#method.is_err
ln is_err(): return true if the result is err()
co $ ..

nn std/result/err
hl https://doc.rust-lang.org/std/result/enum.Result.html#method.err
ln Converts from =Result<T,E>= to =Option<E>=.
co $ ..

nn std/macro
nn std/macro/matches
co $ ..

ns +std/collections/hashmap
nn contains_key
hl https://doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html#method.contains_key
ln contains_key(): returns true if the hash map contains
ln a value for the specified key.
co $ ..

nn entry
hl https://doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html#method.entry
ln entry(): get's the given key's correspdoning entry
ln in the map for in-place manipulation
co $ ..

nn entry/or_insert_with
hl https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html#method.or_insert_with
ln or_insert_with(): ensures a value is in the entry
ln by inserting the result of the default function if empty
ln and returns a mutable reference to the value in
ln the entry
co $ ..
cr entry().or_insert_with()

nn entry/or_default
hl https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html#method.or_default
ln or_default()
co $ ../or_insert_with

nn insert
co $ ..
hl https://doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html#method.insert
ln insert: inserts KV in map. Returns old value (or None),
ln and updates with new value (or creates new value).

nn get
co $ ..
hl https://doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html#method.get
ln get(): Returns a reference to the corresponding key

zz -std/collections/hashmap
ns ../../..

nn std/str/to_string
hl https://doc.rust-lang.org/std/primitive.str.html#method.to_string
ln to_string(): converts a given value to a String
co $ ..

nn std/option
hl https://doc.rust-lang.org/stable/std/option/
co $ ..

nn std/option/as_ref
hl https://doc.rust-lang.org/stable/std/option/enum.Option.html#method.as_ref
co $ ..
ln as_ref(): converts from =&Option<T>= to =Option<&T>=.

nn std/str/trim
hl https://doc.rust-lang.org/std/primitive.str.html#method.trim
ln trim: returns a string slice with leading and trailing
ln whitespace removed

nn std/keywords
co $ ..

nn std/keywords/move
hl https://doc.rust-lang.org/std/keyword.move.html
ln move converts any variables captured by reference
ln or mutable reference to variables captured
ln by value.
co $ ..

nn std/sync
hl https://doc.rust-lang.org/std/sync/index.html
co $ ..

nn std/sync/arc
hl https://doc.rust-lang.org/std/sync/struct.Arc.html
co $ ..
cr A thread-safe reference-counting
cr pointer. 'Arc' stands for 'Atomically
cr Reference Counted'.

nn std/marker
co $ ..

nn std/marker/send
hl https://doc.rust-lang.org/std/marker/trait.Send.html
co $ ..
ln Types that can be transferred across thread
ln boundaries.

nn std/collections/btreemap
hl https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html
co $ ..
ln An ordered map based on a B-Tree.

nn std/str/starts_with
hl https://doc.rust-lang.org/std/primitive.str.html#method.starts_with
co $ ..
ln Returns true if the given pattern matches a
ln prefix of this string slice.

nn std/sync/mutex
hl https://doc.rust-lang.org/std/sync/struct.Mutex.html
co $ ..

nn std/keywords/enum
hl https://doc.rust-lang.org/std/keyword.enum.html
co $ ..

nn update_codebase_rust_2024
hl https://codeandbitters.com/rust-2024-upgrade/
ln Updating a large codebase to Rust 2024
