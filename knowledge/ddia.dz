ns DDIA
gr Reading Notes: Designing Data-Intensive Applications

nn toc
ln Table of Contents

ns DDIA/toc
gr Table of Contents

nn 1_foundations_of_data_systems
ln Part 1: Foundatoins of Data Systems
co $ ..

nn 2_distributed_data
ln Part 2: Distributed Data
co $ ..

nn 3_derived_data
ln Part 3: Derived Data
co $ ..

ns DDIA/toc/1_foundations_of_data_systems

nn 01_reliable_scalable_maintainable
ln Chapter 1: reliable, scalable, and maintainable applications
co $ ..

nn 02_data_models_query_languages
ln Chapter 2: data models and query languages
co $ ..

nn 03_storage_and_retrieval
ln Chapter 3: storage and retrieval
co $ ..

nn 04_encoding_evolution
ln Chapter 4: encoding and evolution
co $ ..

ns DDIA/toc/2_distributed_data

nn 05_replication
ln Chapter 5: Replication
co $ ..

nn 05_replication/reasons_for_replication
ln Reasons for Replication
co $ ..

nn 05_replication/approaches_to_replication
ln three main approaches to replication
co $ ..
ff What are the three main approaches to replication?
fb Single-leader, Multi-leader, and leaderless

nn 05_replication/consistency_models
ln consistency models for deciding how an application
ln should behave under replication lag

nn 06_partitioning
ln Chapter 6: partitioning
co $ ..

nn 07_transactions
ln Chapter 7: transactions
co $ ..

nn 08_trouble_distributed_systems
ln Chapter 8: the trouble with distribtued systems
co $ ..

nn 09_consistency_consensus
ln Chapter 9: Consistency and consensus
co $ ..

ns DDIA/toc/3_derived_data

nn 10_batch_processing
ln Chapter 10: Batch Processing
co $ ..

nn 11_stream_processing
ln Chapter 11: Stream Processing
co $ ..

nn 12_future_data_systems
ln Chapter 12: The future of Data Systems
co $ ..

ns DDIA

nn glossary
ln Glossary

nn glossary/functional_requirements
ln Functional requirements: what it should do, such as
ln allowing data to be sored, retrieved, searched, and
ln processed in various ways.
co $ ..
co $ ../../toc/1_foundations_of_data_systems/01_reliable_scalable_maintainable

nn glossary/nonfunctional_requirements
ln nonfunctional requirements: general properties like
ln security, reliablity, compliance, scalability,
ln compatability, maintainability
co $ ..
co $ ../../toc/1_foundations_of_data_systems/01_reliable_scalable_maintainable

nn glossary/reliability
ln Reliability: making systems work correctly, even when
ln faults occur.
co $ ..
co $ ../../toc/1_foundations_of_data_systems/01_reliable_scalable_maintainable

nn glossary/scalability
ln Scalability: having strategies for keeping performance
ln good, even when load increases.
co $ ..
co $ ../../toc/1_foundations_of_data_systems/01_reliable_scalable_maintainable

nn glossary/maintainability
ln Maintainability: making life better for engineering and
ln operations teams who need to work with the system.
co $ ..
co $ ../../toc/1_foundations_of_data_systems/01_reliable_scalable_maintainable

nn glossary/relational_database
ln Relational Database: invented to solve "many-to-many" problem
co $ ..
co $ ../../toc/1_foundations_of_data_systems/02_data_models_query_languages

nn glossary/nosql
ln NoSQL Datastores
co $ ..
co $ ../../toc/1_foundations_of_data_systems/02_data_models_query_languages

nn glossary/document_database
co $ ../nosql
ln Document Database: targets use cases where data comes in
ln self contained documents and relationships between
ln one document and another are rare.
co $ ..
co $ ../../toc/1_foundations_of_data_systems/02_data_models_query_languages

nn glossary/graph_database
co $ ..
co $ ../../toc/1_foundations_of_data_systems/02_data_models_query_languages
co $ ../nosql
ln Graph Database: useful for cases where data where anything
ln is potentially related to everything

nn glossary/data_model
ln Data Model
co $ ..
co $ ../../toc/1_foundations_of_data_systems/02_data_models_query_languages

nn glossary/query_language
ln Query Language
co $ ..
co $ ../../toc/1_foundations_of_data_systems/02_data_models_query_languages

nn tools
ln tools

nn tools/SQL
ln SQL
co $ ../../glossary/query_language
co $ ..
co $ ../../toc/1_foundations_of_data_systems/02_data_models_query_languages

nn tools/MapReduce
co $ ..
co $ ../../toc/1_foundations_of_data_systems/02_data_models_query_languages
co $ ../../glossary/query_language
ln MapReduce

nn tools/monogdb_aggregration_pipeline
co $ ..
co $ ../../toc/1_foundations_of_data_systems/02_data_models_query_languages
co $ ../../glossary/query_language
ln MongoDB aggregation pipeline

nn tools/cyper
co $ ..
co $ ../../toc/1_foundations_of_data_systems/02_data_models_query_languages
co $ ../../glossary/query_language
ln Cypher

nn tools/SPARQL
co $ ..
co $ ../../toc/1_foundations_of_data_systems/02_data_models_query_languages
co $ ../../glossary/query_language
ln SPARQL

nn tools/datalog
co $ ..
co $ ../../toc/1_foundations_of_data_systems/02_data_models_query_languages
co $ ../../glossary/query_language
ln Datalog


nn tools/CSS
co $ ..
co $ ../../toc/1_foundations_of_data_systems/02_data_models_query_languages
co $ ../../glossary/query_language
cr not a DB query language, but intersting parallel
ln CSS

nn tools/XSL_XPath
co $ ..
co $ ../../toc/1_foundations_of_data_systems/02_data_models_query_languages
co $ ../../glossary/query_language
cr not a DB query language, but intersting parallel
ln XSL/XPath

nn glossary/sequence_similarity_search
ln Sequence Similarity Search: taking one long string (such
ln as a DNA molecule), and matching it against a large
ln database of strings that are similar, but not identical
co $ ..
co $ ../../toc/1_foundations_of_data_systems/02_data_models_query_languages

nn glossary/full_text_search
ln Full Text Search: arguably a kind of data model used
ln alongside databases.
co $ ..
co $ ../../toc/1_foundations_of_data_systems/02_data_models_query_languages

nn glossary/OLTP
ln OLTP: Online Transaction Processing, optimized for
ln transaction processing.
ff What is an OLTP databse?
fb Online transaction processing, optimized for transaction
fb processing
co $ ..
co $ ../../toc/1_foundations_of_data_systems/03_storage_and_retrieval
co $ ../storage_engine

nn glossary/OLAP
ln OLAP: Online analytical processing, optimized for analytical
ln processing
ff What is an OLAP database?
fb Online analytical processing.
co $ ..
co $ ../../toc/1_foundations_of_data_systems/03_storage_and_retrieval
co $ ../storage_engine

nn glossary/storage_engine
ln Storage Engine
co $ ..
co $ ../../toc/1_foundations_of_data_systems/03_storage_and_retrieval

nn glossary/data_warehouse
ln Data Warehouse
co $ ..
co $ ../../toc/1_foundations_of_data_systems/03_storage_and_retrieval
co $ ../OLAP

nn glossary/log_structured
ln Log-structured storage engine: only permits appending to
ln files and deleting obsolete files, but never updates
ln a file that has been written.
co $ ../OLTP
co $ ..
co $ ../../toc/1_foundations_of_data_systems/03_storage_and_retrieval

nn tools/bitcask
ln Bitcask
co $ ..
co $ ../../toc/1_foundations_of_data_systems/03_storage_and_retrieval
co $ ../../glossary/log_structured

nn glossary/SSTable
ln SSTable: Sorted String Table
co $ ..
co $ ../../toc/1_foundations_of_data_systems/03_storage_and_retrieval
co $ ../log_structured

nn glossary/LSM_tree
ln LSM_tree: Log-Structured Merge Tree
co $ ..
co $ ../../toc/1_foundations_of_data_systems/03_storage_and_retrieval
co $ ../log_structured

nn tools/levelDB
ln LevelDB
co $ ..
co $ ../../toc/1_foundations_of_data_systems/03_storage_and_retrieval
co $ ../../glossary/log_structured

nn tools/cassandra
ln Cassandra
co $ ..
co $ ../../toc/1_foundations_of_data_systems/03_storage_and_retrieval
co $ ../../glossary/log_structured

nn tools/hbase
ln HBase
co $ ..
co $ ../../toc/1_foundations_of_data_systems/03_storage_and_retrieval
co $ ../../glossary/log_structured

nn tools/lucene
ln lucene
co $ ..
co $ ../../toc/1_foundations_of_data_systems/03_storage_and_retrieval
co $ ../../glossary/log_structured

nn glossary/update_in_place
ln Update-in-place storage engine: treats disk as set of
ln fixed-size pages that can be overwritten
co $ ../OLTP
co $ ..
co $ ../../toc/1_foundations_of_data_systems/03_storage_and_retrieval

nn glossary/btree
ln B-Tree
co $ ../update_in_place
co $ ..
co $ ../../toc/1_foundations_of_data_systems/03_storage_and_retrieval

nn glossary/column_oriented_storage
ln column oriented storage: aims to encode data very
ln compactly, and minimize amount of data query needs to
ln read from disk
co $ ..
co $ ../../toc/1_foundations_of_data_systems/03_storage_and_retrieval
co $ ../OLAP

nn glossary/rolling_upgrade
ln Rolling Upgrade: a new version of a service is gradually
ln deployed to a few nodes at a time, rather
ln than deploying to all nodes simultaneously.
co $ ..
co $ ../../toc/1_foundations_of_data_systems/04_encoding_evolution

nn glossary/evolvability
ln Evolvability: the ease of making changes in an application
co $ ..
co $ ../../toc/1_foundations_of_data_systems/04_encoding_evolution
co ../rolling_upgrade $

nn tools/JSON
ln JSON
co $ ..
co $ ../../toc/1_foundations_of_data_systems/04_encoding_evolution

nn tools/XML
ln XML
co $ ..
co $ ../../toc/1_foundations_of_data_systems/04_encoding_evolution

nn tools/CSV
ln CSV
co $ ..
co $ ../../toc/1_foundations_of_data_systems/04_encoding_evolution

nn glossary/binary_schema
ln binary schema driven formats
co $ ..
co $ ../../toc/1_foundations_of_data_systems/04_encoding_evolution
rm useful for documentation and code generation, but
rm data needs to be decoded before it is human readable

nn tools/thrift
ln thrift
co $ ..
co $ ../../toc/1_foundations_of_data_systems/04_encoding_evolution
co $ ../../glossary/binary_schema

nn tools/protocol_buffers
ln protocol_buffers
co $ ..
co $ ../../toc/1_foundations_of_data_systems/04_encoding_evolution
co $ ../../glossary/binary_schema

nn tools/avro
ln avro
co $ ..
co $ ../../toc/1_foundations_of_data_systems/04_encoding_evolution
co $ ../../glossary/binary_schema

nn glossary/REST
ln REST API
co $ ..
co $ ../../toc/1_foundations_of_data_systems/04_encoding_evolution

nn glossary/RPC
ln RPC API
co $ ..
co $ ../../toc/1_foundations_of_data_systems/04_encoding_evolution

nn glossary/high_availability
ln High Availability: keeping the system running,
ln even one when machine (or several machines)
ln goes down
co $ ..
co $ ../../toc/2_distributed_data/05_replication
co $ ../../toc/2_distributed_data/05_replication/reasons_for_replication

nn glossary/disconnected_operation
ln Disconnected Operation: Allowing an application
ln to continue working when there is a network
ln interruption
co $ ..
co $ ../../toc/2_distributed_data/05_replication
co $ ../../toc/2_distributed_data/05_replication/reasons_for_replication

nn glossary/latency
ln Latency
co $ ..
co $ ../../toc/2_distributed_data/05_replication
co $ ../../toc/2_distributed_data/05_replication/reasons_for_replication

sn glossary/scalability
co $ ../../toc/2_distributed_data/05_replication
co $ ../../toc/2_distributed_data/05_replication/reasons_for_replication

nn glossary/single_leader_replication
ln Single-leader replication: Clients send all writes
ln to a single node (the leader), which sends a stream
ln of data change events to the other replicas (followers).
ln Reads can be performed on any replica, but reads from
ln followers might be stale.
co $ ..
co $ ../../toc/2_distributed_data/05_replication/approaches_to_replication

nn glossary/multi_leader_replication
ln Multi-leader replication: clients send each write
ln to one of several leader nodes, any of which can
ln accept writes. The leaders send streams of data change
ln events to each other and to any follower nodes.
co $ ..
co $ ../../toc/2_distributed_data/05_replication/approaches_to_replication

nn glossary/leaderless_replication
ln Leaderless Replication: clients send each write to
ln several nodes, and read from several nodes in parallel
ln in order to detect and correct nodes with stale data.

nn glossary/replication_lag
ln Replication Lag: the delay between a write happening
ln on the leader and being reflected on the follower
co $ ..
co $ ../../toc/2_distributed_data/05_replication/consistency_models
cr Consistency models are helpful for deciding how
cr an application should behave under replication lag

nn glossary/read_after_write_consistency
ln Read-after-write consistency: users should always see
ln data that they submitted themselves.
co $ ..
co $ ../../toc/2_distributed_data/05_replication/consistency_models
ff What is "Read After Write Consistency"?
fb In replication, read-after-write consistency is the
fb idea that users should always see data that they
fb submitted themselves.

nn glossary/monotonic_reads
co $ ..
co $ ../../toc/2_distributed_data/05_replication/consistency_models
ln Monotonic Reads: after users have seen the data at
ln one point in time, they shouldn't later see the data
ln from some earlier point in time
ff What are "Monotonic Reads"?
fb In replication, monotonic reads are the idea that
fb if a user sees data from some point in time, they
fb shouldn't later see the data from an earlier point
fb in time (time monotonically increasing)

nn glossary/consistent_prefix_reads
ln Consistent prefix reads: users should see data in a
ln state that makes causal sense: for example, seeing
ln a question and its reply in the correct order.
co $ ..
co $ ../../toc/2_distributed_data/05_replication/consistency_models
ff What are "consistent prefix reads"?
fb In replication consistency models, consistent prefix
fb reads state that users should see data in a state
fb that makes causal sense (ex: question then answer).
