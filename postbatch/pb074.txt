@2025-01-05 Hub Day
@11:56 Getting warmed up
My laptop ran out of batteries, which was weird. I really
thought I powered this off. I guess that didn't happen.
Oops.

@11:58 Troubleshooting this weird variable width issue on leetcode #timelog:00:12:35

@12:12 Another shot at thinking about edit distance #LC75-review #timelog:01:04:53

@12:18 Reading Skiena #dz:leetcode/problems/72_edit_distance
He has this as a case study

@12:42 Banged out a top-down solution #dz:leetcode/problems/72_edit_distance
I had to use the Skiena code for reference

@13:10 Bottoms-up solution is a WIP. will need to return later to it. #dz:leetcode/problems/72_edit_distance #dz:leetcode/problems/72_edit_distance/solutions/bottoms_up
I'm trying to mechanically copy it over from the top-down
solution that works. I think I am missing something in the
initialization step. I've worked too long on it today, and
need to move forward.

@14:15 Improving dzfiles infra on main knowledge graph #dagzet-dzfiles-txt #timelog:00:20:00

@14:37 holding off, this touches too many things #dagzet-dzfiles-txt
for another time. I have created a task for it.

@14:40 trie explore card #dz:leetcode/explore/trie #timelog:00:45:27

@15:34 677 map sum pairs #dz:problems/677_map_sum_pairs #timelog:00:15:32
via the leetcode trie explore card

@16:16 Replace Words #dz:leetcode/problems/648_replace_words #timelog:00:12:32

@16:42 Attempting auto-complete search system #dz:leetcode/problems/642_design_search_autocomplete_system #timelog:01:00:00
It's part of the Trie explore card. It's also a "hard",
which gives me pause. I'm not expecting to solve it all today,
so I will document my attempts here.

@16:51 Hashtag usage is unclear to me #dz:leetcode/problems/642_design_search_autocomplete_system
At first I read it as being a sort of null terminator for
every sentence. But I don't see that. I think it just a
special mode for nothing.

@16:54 Hashtag usage is clearer to me #dz:leetcode/problems/642_design_search_autocomplete_system
It seems to be like it's a way to add user submitted inputs
into the system.
---
Wait, input is a single character from a keystroke. '#'
at the end means: take the characters seen so far and
find the hot sentences with that matching prefix.
---
The state kept track of then would be the last node visited.
For every key, update the last node visisted. Traverse
this node, and find the top 3 matches

@16:54 Use a maxheap #dz:leetcode/problems/642_design_search_autocomplete_system
A maxheap of size 3 could be used to populate the top 3
matches. How it works is, for the top-level node in trie,
traverse through children nodes, and add them onto the heap.
---
If the nodes have a parent pointer, that can be used to
backtrack and reproduce the sentence.

@16:54 more thoughts #dz:leetcode/problems/642_design_search_autocomplete_system
I wondered: is the heap persistant between calls to input()?
No. Because you are refining the options.
---
The '#' operation. Needs to be inserted into the root
trie, and the count updated by 1. A new sentence may
or may not share a prefix, so I think keyboard history
needs to be stored.
---
What happens after '#'? new sentence?


@16:54 initial logic close #dz:leetcode/problems/642_design_search_autocomplete_system
Trie structure and heap logic works. but, I forgot
that I can't push nodes themselves becaues heaps don't
have a built in comparison (and I need it to sort
alphabetically). So, the heap needs to push the actual
sentences as strings.
---
In theory, I could figure out a way to enumerate each
full path of the Trie using DFS. I will return to this,
after dinner.

@18:14 continuing the attempt #dz:leetcode/problems/642_design_search_autocomplete_system #timelog:00:38:39

@18:14 heapq isn't behaving as expected #dz:leetcode/problems/642_design_search_autocomplete_system
It seems to be doing reverse ascii order

@18:40 initial test passes, but it is incomplete #dz:leetcode/problems/642_design_search_autocomplete_system
Turns out, I need to use a maxheap, and I need to store
all the values in the heap and not pop to keep a minimum size.
This is because the insertion order can accidentally remove
the wrong thing with the same count.
---
I have not done anything with '#' yet, so I imagine this
system will fail.

@18:55 got it accepted! concluding thoughts #dz:leetcode/problems/642_design_search_autocomplete_system #nn:leetcode/problems/642_design_search_autocomplete_system/2025_01_05_thoughts
The bug that caught up to me was related to the logic involved
with sentences being made that aren't in the Trie. Once
there isn't a match, there needs to be a way to ensure
that the system doesn't continue matching.
---
My approach keeps track of the last visted node in the
Trie. What I needed to was set this to be None so that it
subsequent inputs wouldn't try searching the node.
---
In retrospect, was keeping track of the last node such
a great move? I wonder if it would just be better to cache
the sentence, and then do a full prefix search to check.
This could also make the sentence query logic easier too.
Prefix search could return the last node, which could
the be traversed.

@19:38 Trying 211 #dz:leetcode/problems/211_design_add_and_search_words_data_structure #timelog:00:34:55
I did this one before, and recall having a bit of a time
with it.

@20:21 Breaking at edge cases #dz:leetcode/problems/211_design_add_and_search_words_data_structure
I think my logic is write: build a trie, and use a stack
with tuple(position, node) for DFS. When it's a letter,
you're pushing and popping evenly. When a '.' appears,
all children are candidates. Some edge cases with
very long inputs break it.

@20:28 Figured it out #dz:leetcode/problems/211_design_add_and_search_words_data_structure
My approach, was correct, but I messed up the control flow.
There was a point where I was breaking out too early
by returning false, when it should have been a continue.
"True" happens on the first node with a terminal whose path
is the length of the word; any valid path can work, so
this can break early on the first. False only happens
when the stack is emptied and there are no more nodes
to traverse, or the path length exceeds the word length.
