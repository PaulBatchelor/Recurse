@2024-09-27 Friday, Sep 27th
@10:30 Late start. Updating my website a little bit.

@11:04 Thinking about flashcards... #flashcard-mvp #timelog:00:15:00
There's a lot of information I need to ingest, and I am
starting to think having a system in place is going to
be necessary.
---
I already have a data format figured out. It's built into my dagzet
system. I'll need to get it working with the rust implementation,
but that shouldn't take too long.
---
What I don't have figured out is a spaced repetition system.
Something that allows me to go through a set flashcards and update
their frequency depending on how I answer.
---
I imagine most of the heavy lifting will be done with SQLite.
A small CLI (prototype in python?) could be used to present
a set of (up to) N flashcards from a given set of namespaces,
randomly selected from a weighted distribution based on priority.
---
Based on how I answer, priority for each flashcard gets
updated.

@13:41 Grind75 #grind75 #timelog:01:41:23

@16:47 3summing research #grind75 #timelog:00:47:50
What's tough here is the acceptance criteria. It needs to be
3 unique indices and the combination itself needs to be
unique. Having the nested 3-loop is cleaner because the variables
are in scope. Doing it with the backtracking approach requires
cramming data in the recursive function.
---
dead end. Moving on

@17:17 3sum: looking at the editorial #grind75
The loops are moved around and hidden, but there still
seems to be 3 distinct loops. The thing that's interesting
(ish) here is that they are treating the problem as an
extension of twosum, and re-using that logic, calling
a version of twosum inside of 3sum.

@17:25 wait wikipedia has a whole page on 3sum #grind75
I like their algorithm, which looks the two-pointer in
the editorial.
